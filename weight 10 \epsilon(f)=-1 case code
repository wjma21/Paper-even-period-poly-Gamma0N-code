# Set count variables
count_true = 0
count_false = 0

# Set the range for N
start = 1
end = 15

for N in range(start, end + 1):
    try:
        forms = Newforms(N, 10, names='a')
    except RuntimeError:
        print(f"N={N}: no newform")
        continue
    
    print(f"\nProcessing level N = {N}，found {len(forms)} Galois orbits")
    
    for f in forms:
        K = f.hecke_eigenvalue_field()
        embeddings = K.embeddings(ComplexField(200))
        
        for phi in embeddings:
            # Generate q-expansion after embedding
            q_coeffs = [phi(c) for c in f.q_expansion(5).padded_list(5)]
            q_str = " + ".join(f"{c.real():.4f}q^{n+1}" for n, c in enumerate(q_coeffs[1:4]))
            
            # Directly obtain the Dokchitser object and reinitialize coefficients
            L = f.lseries(prec=200)
            an = [phi(f.coefficient(n)) for n in range(1, 1000)]
            
            # Correctly Initialize Coefficients
            L.init_coeffs(
                an,
                cutoff=1.0,
                max_imaginary_part=5.0,
                max_asymp_coeffs=100
            )

            #  Calculate L(5) and check if it is zero
            L4 = L(5).real()
            if abs(L5) > 1e-10:  
                print(f"Form: {q_str} | L5={L5:.6f} is not zero, skip")
                continue
            
            L7 = L(7).real()
            L9 = L(9).real()
            
            # Calculate inequality terms
            pi_sq_over_N = (pi.n(100) ** 2) / N
            left_value = (pi_sq_over_N * L7).n(50)
            ratio = left_value / L9
            
            # Determine and count
            if left_value <= L9:
                result = "ture"
                count_true += 1
            else:
                result = "false"
                count_false += 1
            
            # Output
            print(f"Form: {q_str} | L5={L5:.6f} | (π²/N)L7={left_value:.6f} | L9={L9:.6f} | Ratio={ratio:.6f} | Result: {result}")

print(f"\nStatistics: {count_true} cases ture, {count_false} cases do not false")
