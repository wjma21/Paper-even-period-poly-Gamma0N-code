# Set count variables
count_true = 0
count_false = 0

# Set parameters
N_start = 20
N_end = 21
k_start = 14
k_end = 18  
k_step = 4
CC = ComplexField(200)
PI = CC.pi()

for k in range(k_start, k_end+1, k_step):
    if k % 4 != 2:
        continue
    
    m = k//2 - 1
    max_n = m//2 - 1
    if max_n < 1:
        continue
    
    for N in range(N_start, N_end + 1):
        try:
            forms = Newforms(N, k, names='a')
        except RuntimeError:
            print(f"N={N}, k={k}: no newform")
            continue
        
        print(f"\nProcessing level N = {N}, weight k = {k}，found {len(forms)} Galois orbits")
        
        for f in forms:
            K = f.hecke_eigenvalue_field()
            embeddings = K.embeddings(CC)
            
            for phi in embeddings:
                # q-expansion
                q_coeffs = [phi(c) for c in f.q_expansion(5).padded_list(5)]
                q_str = " + ".join(f"{c.real():.4f}q^{n+1}" for n, c in enumerate(q_coeffs[1:4]))
                
                # L-function              
                L = f.lseries(prec=200)
                an = [phi(f.coefficient(n)) for n in range(1, 1000)]
                L.init_coeffs(
                    an,
                    cutoff=1.0,
                    max_imaginary_part=5.0,
                    max_asymp_coeffs=100
                )
                
                try:
                    L_k_half = L(k//2).real()
                except (RuntimeError, ZeroDivisionError):
                    print(f"Form: {q_str} | L(k/2) computation failed, skipping")
                    continue
                
                print(f"\nForm: {q_str}")
                print(f"L_f({k//2}) = {L_k_half:.6f}")
                
                # Verify inequality
                all_inequality_hold = True
                for n in range(1, max_n + 1):
                    s_left = m + 2*n + 1
                    s_right = s_left + 2
                    denominator = N * (m - 2*n) * (m - 2*n - 1)
                    
                    try:
                        L_left = L(s_left).real()
                        L_right = L(s_right).real()
                    except (RuntimeError, ZeroDivisionError):
                        print(f"n={n}: L-function value computation failed")
                        all_inequality_hold = False
                        break
                    
                    left_value = (L_left * 4 * PI^2) / denominator
                    right_value = L_right
                    
                    print(f"n={n}: (4π²L({s_left})/denominator = {left_value:.6f} < L({s_right}) = {right_value:.6f}")
                    
                    if left_value >= right_value - 1e-8:  
                        all_inequality_hold = False
                        break
                
                if all_inequality_hold:
                    print("Conclusion: true")
                    count_true += 1
                else:
                    print("Conclusion: false")
                    count_false += 1

print(f"\nFinal statistics: {count_true} cases true, {count_false} cases false")
